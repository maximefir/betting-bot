"""
main.py
-------
Orchestration du bot.
- Scrape les boosts
- Planifie chaque boost dans un thread
- Lance un thread s√©par√© pour surveiller le solde
- Watchdog surveille tout et relance si crash
"""

from db import init_db, log
from scraper import get_boosts
from scheduler import schedule_boost
from balance import start_balance_watcher
from notifier import notify
from watchdog import watchdog

def main():
    # Initialisation
    init_db()
    log("INFO", "Bot d√©marr√©")
    notify("ü§ñ Bot d√©marr√©")

    # √âtape 1 : r√©cup√©ration des boosts
    boosts = get_boosts()
    if not boosts:
        log("INFO", "Aucun boost trouv√©")
        notify("‚ÑπÔ∏è Aucun boost trouv√©")
    else:
        for b in boosts:
            schedule_boost(b)  # Chaque boost a son thread

    # √âtape 2 : surveillance du solde en parall√®le
    start_balance_watcher(interval=600)  # V√©rifie toutes les 10 min

    # √âtape 3 : garder le bot vivant
    # ‚Üí Ici, on boucle pour que le process principal reste actif
    try:
        while True:
            pass  # Threads font le boulot
    except KeyboardInterrupt:
        log("INFO", "Bot arr√™t√© manuellement")
        notify("üõë Bot arr√™t√© manuellement")

if __name__ == "__main__":
    watchdog(main)
