"""
balance.py
----------
G√®re le solde et les retraits automatiques.
Un thread ind√©pendant v√©rifie r√©guli√®rement si le solde
d√©passe un seuil et d√©clenche un retrait si n√©cessaire.
"""

import threading
import time
from db import update_balance, log
from notifier import notify
from config import WITHDRAW_THRESHOLD

def refresh_balance():
    """
    R√©cup√®re le solde actuel (simulation).
    En vrai ‚Üí scraper ou appeler API.
    """
    # Exemple : valeur fixe pour l‚Äôinstant
    balance = 600
    update_balance(balance)
    return balance

def check_withdraw():
    """
    V√©rifie si on doit retirer l‚Äôargent (bloquant).
    Appel√© p√©riodiquement par un thread d√©di√©.
    """
    balance = refresh_balance()
    if balance >= WITHDRAW_THRESHOLD:
        log("INFO", f"Seuil atteint ({balance}‚Ç¨) ‚Üí retrait lanc√©")
        notify(f"üí∏ Retrait automatique lanc√© ({balance}‚Ç¨)")
        perform_withdraw(balance)

def perform_withdraw(amount):
    """
    Effectue un retrait (simulation).
    """
    log("INFO", f"Retrait de {amount}‚Ç¨ effectu√©")
    notify(f"‚úÖ Retrait de {amount}‚Ç¨ effectu√©")

def start_balance_watcher(interval=600):
    """
    Lance un thread qui v√©rifie le solde toutes les `interval` secondes.
    """
    def watcher():
        while True:
            check_withdraw()
            time.sleep(interval)

    t = threading.Thread(target=watcher, daemon=True)
    t.start()
